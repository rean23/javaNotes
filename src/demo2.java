//数据运算
public class demo2 {
    public static void main(String[] args) {

        /**
         * 整数的数值表示不但是精确的，而且整数运算永远是精确的，即使是除法也是精确的，因为两个整数相除只能得到结果的整数部分：
         */
        int i1 = 10 / 3;//3
        System.out.println(i1);

        //int i2 = 10/0;//整数的除法对于除数为0时运行时将报错，但编译不会报错。
        //System.out.println(i2);

        /**
         * 数据溢出
         */
        int x = 2147483640;
        int y = 15;
        int sum = x + y;//-2147483641 换为long类型则可解决
        System.out.println(sum);

        /**
         * 简写运算符
         */
        int n = 100;
        n += 100;//相当于n=n+100
        System.out.println(n);//200
        n -= 100;//相当于n=n-100
        System.out.println(n);//100

        int n1 = 200;
        n1++;
        System.out.println(n1);//201
        n1--;
        System.out.println(n1);//200
        /**
         * 注意++写在前面和后面计算结果是不同的，++n表示先加1再引用n，n++表示先引用n再加1。不建议把++运算混入到常规运算中，容易自己把自己搞懵了
         */

        /**
         * 二进制知识点:
         * 二进制的最高位是符号位（“0”代表正数，“1”代表负数）；
         * Java中没有无符号数；
         * 计算机以整数的补码进行运算；
         */

        /**
         * 原码 将一个整数转为二进制显示
         * 以 int 类型为例，int类型占4个字节、共32位。
         * 例如，2 的原码为：00000000 00000000 00000000 00000010
         *      -2的原码为：10000000 00000000 00000000 00000010
         * 反码
         * 正数的反码：与原码相同
         * 负数的反码：原码的符号位不变，其他位取反
         * 例如-2的反码为:11111111 11111111 11111111 11111101
         *
         * 补码
         * 正数的补码：与原码相同
         * 负数的补码：负数的反码+1(把反码当做一个整数+1)
         * 例如-2的反码为：11111111111111111111111111111110 这里最后一位逢2进1 所以补码是10
         */

        //按位与 &：必须两个数同时为1，结果才为1
        /**
         *  2的原码为： 00000000 00000000 00000000 00000010
         *  3的原码为： 00000000 00000000 00000000 00000011
         *  计算结果 00000000 00000000 00000000 00000010=2
         */
        int a = 2 & 3;
        System.out.println(a);//2

        //按位或 |：只要任意一个为1，结果就为1
        /**
         * 2的原码为： 00000000 00000000 00000000 00000010
         * 3的原码为： 00000000 00000000 00000000 00000011
         * 计算结果 00000000 00000000 00000000 00000011=3
         */
        a = 2 | 3;
        System.out.println(a);//3

        //按位异或 ^：如果两个数不同，结果为1，否则为0
        /**
         *  2的原码为： 00000000 00000000 00000000 00000010
         *  3的原码为： 00000000 00000000 00000000 00000011
         *  计算结果 00000000 00000000 00000000 00000001=1
         */
        a = 2 ^ 3;
        System.out.println(a);//1

        //非运算符
        /**
         * 1.符号位不变，按位取反
         * 2.符号位为0（整数）：取反的结果-1，符号位为1（负数），取反结果+1
         * 3.包含符号位，按位取反
         * 2的原码为:00000000 00000000 00000000 00000010
         *          01111111 11111111 11111111 11111101
         *          01111111 11111111 11111111 11111100
         *          10000000 00000000 00000000 00000011
         *          得出3 因为符号位为1  所以为负数 则结果为-3
         */
        System.out.println(~2);//-3


        //类型自动提升
        short s1 = 1234;
        int s2 = 5678;

        int b1 = s1 + s2;
        short b2 = (short)(s1+s2);//这里ide会报错 因为short类型提升为int 只能进行类型强制转换
        System.out.println(b1);//6912
        System.out.println(b2);//6912 经过强制转换的数值很可能会不准确
    }
}
